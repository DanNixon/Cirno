/**
 * Sample with bitmap images.
 *
 * Original image from here: http://kane-neko.deviantart.com/art/Touhou-Chibi-Cirno-290965347
 * Image array generated with: https://github.com/DanNixon/GLCD-BitmapConverter
 */

#include "U8glib.h"
#include "UniversalButtons.h"

#include "TiLDA_MKe.h"

TiLDA_MKe tilda;

const uint8_t cirno_bitmap[] U8G_PROGMEM =
{
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x01,0xf8,0x00,0x00,0x07,0xe0,
  0x00,0x07,0xff,0x00,0x00,0x3f,0xf8,
  0x00,0x07,0xff,0xc2,0x00,0xff,0xfc,
  0x00,0x0f,0xff,0xf6,0x03,0xff,0xfc,
  0x00,0x0f,0xff,0xfc,0x47,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x03,0xff,0xff,0xff,0xff,0xf0,
  0x00,0x01,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xff,0xff,0xf7,0xe0,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x17,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xdf,0xfb,0xff,0xe0,
  0x00,0x07,0xff,0xcf,0xf3,0xbf,0xe0,
  0x00,0x03,0xf9,0x9f,0xf8,0x9f,0xf0,
  0x00,0x03,0xff,0xf7,0xe7,0xef,0xf0,
  0x00,0x03,0xff,0xf7,0xef,0xff,0xf0,
  0x00,0x03,0xe4,0xf3,0x8b,0xff,0xf0,
  0x00,0x03,0xf7,0xf1,0x0b,0xcf,0xf0,
  0x00,0x01,0xf7,0xf0,0x0f,0xdf,0xe0,
  0x00,0x00,0xf3,0xc0,0x0f,0x5f,0xc0,
  0x00,0x00,0xf9,0x20,0x04,0x1f,0xc0,
  0x00,0x00,0xfc,0xe0,0x06,0xbf,0xc0,
  0x18,0x01,0xfd,0xc0,0x03,0x3f,0x80,
  0x0f,0x00,0x7f,0xc0,0x03,0xfe,0x00,
  0x03,0xc0,0x7f,0x01,0xc0,0xfe,0x01,
  0x00,0xe2,0x17,0xc0,0x03,0xfe,0x00,
  0x00,0x3c,0x0b,0xf8,0x1f,0x58,0x03,
  0x00,0x1e,0x42,0xbf,0xff,0x5c,0x1c,
  0x00,0x07,0xf0,0x13,0xc9,0x58,0x78,
  0x00,0x01,0xb0,0x3b,0xf8,0xdd,0xe0,
  0x00,0x00,0xc1,0x3e,0xf9,0x07,0x80,
  0x00,0x00,0x02,0x7f,0xfc,0x80,0x00,
  0x00,0x00,0x85,0xff,0xff,0x80,0x00,
  0x00,0x00,0xa1,0xbf,0xfc,0x20,0x80,
  0x04,0x00,0xf0,0x3f,0xfc,0x05,0x00,
  0x01,0xff,0xc0,0x3f,0xfc,0x07,0xff,
  0x00,0x00,0x01,0x7f,0xfc,0x01,0xfe,
  0x00,0x00,0x01,0xff,0xfd,0x00,0x00,
  0x00,0x00,0x39,0xff,0xff,0x00,0x00,
  0x00,0x00,0xbb,0xff,0xff,0x12,0x00,
  0x00,0x00,0x73,0x9f,0xff,0x88,0x00,
  0x00,0x01,0xc7,0x9c,0xe7,0xc6,0x00,
  0x00,0x02,0x01,0x90,0x47,0x83,0x20,
  0x00,0x10,0x00,0x80,0x0f,0x00,0x20,
  0x00,0x00,0x00,0x23,0xc6,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x02,0xc0,0x02,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x40,0x00,
  0x00,0x00,0x00,0x80,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x02,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x80,0x00,
};

const uint8_t big_cirno_bitmap[] U8G_PROGMEM =
{
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x01,0xf8,0x00,0x00,0x07,0xe0,
  0x00,0x03,0xfe,0x00,0x00,0x1f,0xf0,
  0x00,0x07,0xff,0x00,0x00,0x3f,0xf8,
  0x00,0x07,0xff,0x81,0x00,0x7f,0xf8,
  0x00,0x07,0xff,0xc2,0x00,0xff,0xfc,
  0x00,0x0f,0xff,0xe2,0x01,0xff,0xfc,
  0x00,0x0f,0xff,0xf6,0x03,0xff,0xfc,
  0x00,0x0f,0xff,0xf4,0x03,0xff,0xfc,
  0x00,0x0f,0xff,0xfc,0x47,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xfc,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x07,0xff,0xff,0xff,0xff,0xf8,
  0x00,0x03,0xff,0xff,0xff,0xff,0xf0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xf0,
  0x00,0x01,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x01,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x01,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xc0,
  0x00,0x03,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xf7,0xff,0xff,0xff,0xe0,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x0f,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x17,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xff,0xff,0xff,0xe0,
  0x00,0x07,0xff,0xdf,0xfb,0xff,0xe0,
  0x00,0x07,0xff,0x8f,0xfb,0xff,0xe0,
  0x00,0x07,0xff,0xcf,0xf3,0xbf,0xe0,
  0x00,0x07,0xfd,0x2f,0xf5,0x9f,0xf0,
  0x00,0x03,0xfd,0x9f,0xf8,0x9f,0xf0,
  0x00,0x03,0xfb,0xc7,0xf3,0xdf,0xf0,
  0x00,0x03,0xff,0xf7,0xf7,0xef,0xf0,
  0x00,0x03,0xf7,0xe7,0xe7,0xef,0xf0,
  0x00,0x03,0xff,0xf7,0xef,0xff,0xf0,
  0x00,0x03,0xf7,0xf3,0x8f,0xff,0xf0,
  0x00,0x03,0xe4,0xf3,0x8b,0xff,0xf0,
  0x00,0x03,0xf4,0xf1,0x8b,0xcf,0xf0,
  0x00,0x03,0xf7,0xf1,0x0b,0xcf,0xf0,
  0x00,0x01,0xf7,0xf1,0x0f,0xdf,0xe0,
  0x00,0x01,0xf7,0xf0,0x0f,0xdf,0xe0,
  0x00,0x00,0xf3,0xe0,0x0f,0xdf,0xc0,
  0x00,0x00,0xf3,0xc0,0x0f,0x5f,0xc0,
  0x00,0x00,0xf9,0x20,0x07,0x9f,0xc0,
  0x00,0x00,0xf9,0x20,0x04,0x1f,0xc0,
  0x00,0x00,0xfd,0x80,0x04,0xbf,0xc0,
  0x00,0x00,0xfc,0xe0,0x06,0xbf,0xc0,
  0x20,0x01,0xff,0x40,0x07,0xbf,0x80,
  0x18,0x01,0xfd,0xc0,0x03,0x3f,0x80,
  0x0c,0x00,0xff,0xc0,0x03,0xfe,0x80,
  0x0f,0x00,0x7f,0xc0,0x03,0xfe,0x00,
  0x07,0x40,0x7f,0x00,0x03,0x7e,0x00,
  0x03,0xc0,0x7f,0x01,0xc0,0xfe,0x01,
  0x01,0x88,0x17,0x80,0x01,0xfe,0x00,
  0x00,0xe2,0x17,0xc0,0x03,0xfe,0x00,
  0x00,0x70,0x17,0xe0,0x07,0xfe,0x21,
  0x00,0x3c,0x0b,0xf8,0x1f,0x58,0x03,
  0x00,0x3c,0x0b,0xfe,0x7f,0x59,0x0e,
  0x00,0x1e,0x42,0xbf,0xff,0x5c,0x1c,
  0x00,0x0f,0x40,0xbf,0xf9,0x58,0x3c,
  0x00,0x07,0xf0,0x13,0xc9,0x58,0x78,
  0x00,0x03,0xe1,0x35,0xe8,0xd2,0xf0,
  0x00,0x01,0xb0,0x3b,0xf8,0xdd,0xe0,
  0x00,0x01,0xf2,0x39,0xf8,0x0b,0xc0,
  0x00,0x00,0xc1,0x3e,0xf9,0x07,0x80,
  0x00,0x00,0x02,0xff,0xfc,0xcf,0x00,
  0x00,0x00,0x02,0x7f,0xfc,0x80,0x00,
  0x00,0x00,0x03,0xff,0xff,0xa0,0x00,
  0x00,0x00,0x85,0xff,0xff,0x80,0x00,
  0x00,0x04,0xc1,0xbf,0xfc,0x00,0x00,
  0x00,0x00,0xa1,0xbf,0xfc,0x20,0x80,
  0x00,0x00,0xf4,0x3f,0xfd,0x00,0x10,
  0x04,0x00,0xf0,0x3f,0xfc,0x05,0x00,
  0x10,0xff,0xe0,0xbf,0xfc,0x48,0x00,
  0x01,0xff,0xc0,0x3f,0xfc,0x07,0xff,
  0x00,0x0f,0x82,0x7f,0xfc,0x83,0xff,
  0x00,0x00,0x01,0x7f,0xfc,0x01,0xfe,
  0x00,0x00,0x01,0x7f,0xfd,0x01,0xc0,
  0x00,0x00,0x01,0xff,0xfd,0x00,0x00,
  0x00,0x00,0x01,0xff,0xff,0x00,0x00,
  0x00,0x00,0x39,0xff,0xff,0x00,0x00,
  0x00,0x00,0x19,0xff,0xff,0x00,0x00,
  0x00,0x00,0xbb,0xff,0xff,0x12,0x00,
  0x00,0x00,0x33,0xff,0xff,0x94,0x00,
  0x00,0x00,0x73,0x9f,0xff,0x88,0x00,
  0x00,0x02,0xf7,0x9c,0xf7,0x8c,0x80,
  0x00,0x01,0xc7,0x9c,0xe7,0xc6,0x00,
  0x00,0x01,0x83,0x98,0x67,0xc6,0x00,
  0x00,0x02,0x01,0x90,0x47,0x83,0x20,
  0x00,0x00,0x00,0x80,0x4f,0x00,0x80,
  0x00,0x10,0x00,0x80,0x0f,0x00,0x20,
  0x00,0x00,0x01,0xe0,0x0f,0x80,0x18,
  0x00,0x00,0x00,0x23,0xc6,0x80,0x00,
  0x00,0x00,0x00,0x00,0x04,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x02,0xc0,0x02,0x00,0x00,
  0x00,0x00,0x00,0x80,0x01,0x40,0x00,
  0x00,0x00,0x00,0x00,0x00,0x40,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x80,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x02,0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0x00,0x00,0x40,0x00,
  0x00,0x00,0x00,0x00,0x00,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

bool landscape = false;

void setup(void)
{
  SerialUSB.begin(115200);
  SerialUSB.println("Cirno");

  tilda.setBacklight(LCD_BACKLIGHT_ON);

  // Set button callback
  tilda.buttons.setStateChangeCallback(&button_handler);

  // Light the RGB LEDs
  tilda.setLED(1, 5, 20, 50);
  tilda.setLED(2, 5, 20, 50);
}

void loop()
{
  // See if there were any button changes
  tilda.buttons.poll();

  if(landscape)
    tilda.glcd.undoRotation();
  else
    tilda.glcd.setRot90();

  // Display some text on the GLCD
  tilda.glcd.firstPage();
  do
  {
    if(landscape)
      tilda.glcd.drawBitmapP(0, 0, 7, 64, cirno_bitmap);
    else
      tilda.glcd.drawBitmapP(0, 0, 7, 128, big_cirno_bitmap);
  }
  while(tilda.glcd.nextPage());

  delay(10);
}

/**
 * Basic handler for button state changes.
 */
void button_handler(buttonid_t id, uint8_t state)
{
  // Toggle backlight on pressing Light button
  if(state && (id == BUTTON_LIGHT))
    tilda.toggleBacklight();

  if(state && ((id == BUTTON_UP) || (id == BUTTON_DOWN)))
    landscape = false;

  if(state && ((id == BUTTON_LEFT) || (id == BUTTON_RIGHT)))
    landscape = true;
}
